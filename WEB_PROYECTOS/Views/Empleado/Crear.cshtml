@model Entidad.Empleado

@{
    ViewBag.Title = "Crear";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form action="@Url.Action("Crear","Empleado")" method="post" id="frmEmpleado">

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Crear Empleado</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <label class="control-label col-md-2">Nombres</label>
            <div class="col-md-10">
                <input type="text" class="form-control" id="Nombres" name="Nombres" placeholder="Ingrese Nombre del Empleado" />
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Apellidos</label>
            <div class="col-md-10">
                <input type="text" class="form-control" id="Apellidos" name="Apellidos" placeholder="Ingrese Apellido del Empleado" />
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Correo Electronico</label>
            <div class="col-md-10">
                <input type="text" class="form-control" id="Email" name="Email" placeholder="Ingrese Email del Empleado" />
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Direccion</label>
            <div class="col-md-10">
                <input type="text" class="form-control" id="Direccion" name="Direccion" placeholder="Ingrese Direccion del Empleado" />
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Celuar</label>
            <div class="col-md-10">
                <input type="text" class="form-control" id="Celular" name="Celular" placeholder="Ingrese Celular del Empleado" />
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Departamento</label>
            <div class="col-md-10">
                <select class="form-control" id="Departamentoid" name="Departamentoid">
                    <option value="">Seleccionar Departamento ...</option>
                </select>
                
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Crear Empleado" class="btn btn-primary" />
            </div>
        </div>
    </div>
</form>

<div>
    <a class="btn btn-default" href="@Url.Action("Index","Empleado")">Regresar</a>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        getDepartamentos();
        

        $("#frmEmpleado").submit(function (event) {
            event.preventDefault();

            var dptoid = $("#Departamentoid").val();
            if (dptoid == "") {
                alert("Debe Seleccionar un Departamento");
                return;
            }

            var post_url = $(this).attr("action");
            var request_method = $(this).attr("method");
            var form_data = $(this).serializeArray();
            console.log(form_data);
            // se manda justo antes de la peticion Ajax
            LoadingOverlayShow("#frmEmpleado");
            $.ajax({
                url: post_url,
                type: request_method,
                data: form_data
            }).done(function (response) {
                LoadingOverlayHide("#frmEmpleado");
                console.log(response);
                if (response.ok) {
                    alert("Empleado creado Correctamente");
                    window.location = response.toRedirect;
                } else {
                    alert(response.msg);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                LoadingOverlayHide("#frmEmpleado");
                // object jqXHR e un objeto que contiene todos los datos de la solicitud Ajax realizada.
                // incluyendo la propiedad jqXHR.status que contiene otros posibles, el codigo de estado HTTP de la respuesta.
                // string textStatus: texto que describe el tipo de error, que puede ser, adema de null,
                // <<abort>>, <<timeout>>, <<no transport>> o <<parseerror>>.
                // string errorThrown: si hay un error HTTP, contiene el texto de la cabecera HTTP de estado.
                // por ejemplo, para un error HTTP 404, errorThrown es <<Not found>>; para error un HTTP 500 es <<Internal Server Error>>
            });
        });
    </script>
}
